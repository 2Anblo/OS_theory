第一章 引论
操作系统的定义：
 ①OS是一个扩展机，作为人机交互的接口。
 ②OS是资源的管理者。
操作系统的基本特征
　　1.并发性
　　2.虚拟性
　　3.共享性
　　4.异步性
多道批处理系统：（内存中存放多个任务）
	优点：
	①资源利用率高
	②作业吞吐量大
	缺点：
	①用户交互性差
	②作业平均周转时间长
分时系统：
	人机交互性好/共享主机/用户独立性 （同时性，独立性，交互性）
实时系统：
	工业控制
BIOS是英文"Basic Input Output System"的缩略词，直译过来后中文名称就是"基本输入输出系统"。
系统调用（软中断）：将经常使用的操作固化。（工作机制与中断相似）。
				系统调用也是操作系统提供的给应用程序的接口。

第二章 进程与线程
2.1进程
2.1.1 进程的概念引入
进程->PCB
线程->TCB
作业->不在内存，存储在外存中的后备作业队列中。
进程，为了引入并发而创建的概念。

早期单道程序技术中，程序顺序执行，
	特点：①顺序性 ②封闭性（不受外界干扰）③可再现性（初始条件一致结果一致）④与时间无关性（运行速度不论快慢结果一致）

多道程序技术中，程序并发执行，
	特点：①并发性（多个程序可同时执行） ②异步性（受其他程序制约）③开放性（结果会受外界干扰）④不可再现性（并发导致每次运行结果不一致）

并发后一个程序可对应多个执行过程，不能按程序分配资源，要以执行过程作为资源分配的单位。

进程的三要素：
	①程序
	②数据
	③运行（PCB）

进程作为的两个基本单位：
	①资源分配的基本单位
	②调度的基本单位

2.1.2 进程模型
进程具有动态性和并发性。（宏观：多个进程同时运行；微观：交替使用CPU，Only one program active at any instant）

进程与程序的区别：
	①进程是动态的，程序是静态的。
	②进程是临时的（有生命周期），程序是永久的。
	③进程与程序的组成不同。
	④一个程序可以对应多个进程。

进程的创建时机：
	①进程在系统初始化时创建。
	②进程可以通过系统调用创建。
	③进程可以通过用户请求发出的命令创建。
	④在初始化批处理作业时创建进程。

进程的撤销时机：
	①Normal exit(voluntary)
	②Error exit(voluntary，比如找不到资源文件)
	③Fatal error(involuntary,致命性错误，比如除数为0)
	④Killed by another process(involuntary,被其他进程结束)

2.1.3 进程的状态
进程状态：
	①Running（运行态，一个时刻最多一个）
	②Ready（就绪态）
	③Blocked（阻塞态）
Blocked->Running不允许
Ready->Blocked不允许
Running->Ready（进程时间片结束主动出让CPU）

进程状态切换的发起者：
	①Ready->Running，调度程序选中进程。
	②Running->Ready，调度程序选中另一进程。
	③Running->Blocked，进程执行阻塞式系统调用。
	④Blocked->Ready，外部事件唤醒进程。
为了扩充物理内存可能会将就绪或阻塞队列挂起到外存空间。

2.1.4 进程的实现
PCB（Process Control Block，进程控制块）：进程存在的唯一标识。PCB存放在内核区，通过系统调用访问。
PT（Process Table）:进程表，由多个PCB构成。

PCB表结构具有线性表结构（存放道数有限），索引表结构，链接表结构。

2.1.5 多道程序设计模型
CPU利用率计算公式：
	CPU = 1- p^n (p为CPU idle或者I/O wait的概率)

2.2 线程
2.2.1 线程的引入
线程：“轻量级进程（Lightweight Process）”，作为进程的一个实体，引入线程是为了以比较小的系统开销提高进程内的并发程度。（只是进程的一个执行体，与资源无关）

两个基本单位
	①进程作为资源分配的单位（多任务并发）
	②线程作为CPU调度的单位（进程内并发，只拥有必不可少的资源）

2.2.2 线程模型
进程间切换，涉及资源切换，开销大。
线程间切换，开销小，可频繁切换，提高任务内的并发度。

每个线程都拥有自己的栈空间，记录断点和运行轨迹。
每个线程都拥有自己的TCB（Thread Control Block），共享PCB和内存空间。

2.2.3 线程的使用
多线程进程在运行时，某一线程被阻塞，整个进程不会被阻塞。
实现任务内的并发执行。

2.2.4 线程的实现
用户级线程：
	应用进程利用用户空间线程包对线程进行创建，调度，管理。
	时间片等额分配给进程，时钟中断对用户级线程不起作用，中断不会导致切换线程。
	内核只管理进程。
	线程阻塞会导致整个进程阻塞，时间片切给下一进程。
内核级线程：
	线程依赖OS内核进行创建，撤销等操作。
	线程切换由内核完成。
	时钟中断可以导致线程切换。
	线程阻塞不会导致整个进程阻塞。

2.3 进程间通信
2.3.1 基本问题
进程间通信的三个基本问题：
	①Communication（进程间信息如何传递）
	②Mutual Exclusion（互斥控制）
	③Synchronous（同步控制）

进程间的制约关系：
①间接制约：进行竞争，需互斥控制。
②直接制约：进行协作，需同步控制。

2.3.2 临界区
临界资源（Critical Resources）：一种一次只能为一个进程服务的资源。
临界区（Critical Region）：与临界资源相关的代码。
进程互斥：两个进程不能同时进入访问同一临界资源的临界区。

互斥的四条准则：
	①空闲则入（无进程占用Critical Region）
	②忙则等待（Critical Region被占用则等待）
	③让权等待（不占用CPU等待，主动出让CPU使用权）
	④有限等待（保证等待时间有限）

*2.3.3 互斥的几种实现
忙等互斥的几种控制方法：
	①Disabling interrupts关中断（对进入Critical Region的进程关闭中断，使得其在临界区中CPU不会切走）
	②Lock variables加锁法（可能会有同时进入临界区的情况发生）
	③Strict alternation严格轮转法（可以实现互斥，但是A必须等B运行一次才能继续运行）
	④Peterson's solution Peterson算法
	while(turn == process && interested[other] == TRUE)
	两个人都想进，后来的要等。当前的turn是后来的。
	⑤The TSL instruction 硬件加锁法（先加锁再比较）
具体实现看PPT

优点：①简单 ②只需为每个临界区设立一个布尔变量。
缺点：①耗费CPU时间，“忙等”，不能实现“让权等待”。
	   ②可能产生饿死现象。

2.3.4 信号量的定义
原语 down(s);P(s); 若s减1后<0，则执行P操作的进程被阻塞；
原语up(s);V(s);若s加1后小于等于0，则从该信号的等待队列中唤醒一等待进程，然后再返回原进程继续执行或转进程调度。

2.3.5 信号量实现互斥
mutex为互斥信号量，初值为1；临界区代码置于down(mutex)和up(mutex)原语之间。
必须成对使用down和up原语，down、up原语不能次序错误、重复或遗漏。

2.3.6 同步问题
同步：一组并发进程，因直接制约而互相发送消息而进行互相合作、互相等待，使得各进程按一定的速度执行的过程称为进程间的同步。
同步控制中，各进程之间发送的信号量为私有信号量（只能由某一个进程对其进行down操作，区别于mutex可由多个进程对同一信号量down）。

2.3.7 生产者-消费者问题
生产者消费者问题，既是同步，又是互斥。有full和empty两个私有信号量，mutex作为互斥信号量保证每次只有一个进程访问缓冲区。在做PV操作时，要先进行同步操作，再进行互斥操作，特别是对于down操作而言，如果先进行互斥再做同步对资源数目检查，会导致死锁。

2.3.8 管程
管程是由局部数据结构、多个处理过程和一套初始化代码组成的模块。（编程语言中的概念）
管程中的过程是互斥实现的。
管程实现互斥的方法：将所有的临界区转换成管程中的过程。
管程实现同步的方法：引入条件变量full、empty及相关的操作wait、signal。

2.3.9 其他通信方式
其他通信方式：
	①Message Passing 消息传递——通过发送原语send和接受原语receive做信息交换。
	②Barriers 屏障/障碍法
	③低级通信与高级通信，高级通信常用方式有共享存储区方式，消息或邮箱机制，管道、文件、文件映射。

2.4 经典的IPC问题
2.4.1哲学家就餐问题
加同步（最多四个人拿筷子），加互斥在拿筷子前down拿完后up
2.4.2读者-写者问题
	“读-写”互斥，
	“写-写”互斥，
	“读-读”允许。
读者为半互斥，写者为全互斥。
考虑读者优先与写者优先的问题。

2.5调度
2.5.1调度简介
调度（Scheduling）的对象主要为进程，即分配CPU的过程。
设置I/O繁忙型进程优先级高与CPU密集型进程可以提高OS利用率。

何时调度：
	①a new process is created新进程创建
	②a process exits进程结束
	③a process blocks进程阻塞（出让CPU）
	④an I/O interrupt occurs I/O中断产生，可能要唤醒某个阻塞进程
	⑤preemptive/nonpreemptive 抢占式与非抢占式

抢占式：
	①更高优先级进程抢占
	②时钟中断触发调度

非抢占式：
	当进程主动出让CPU（阻塞/结束），否则时间片不切换。

调度算法分类：
	①批处理（非抢占式）
	②Interactive 分时/交互式（抢占，时间片切换）
	③Real-time 实时系统

调度算法的目标：
	对于所有系统：
		①Fairness，大体公平
		②Policy enforcement，策略可执行性
		③Balance，平衡性
	批处理系统：
		①Throughput，吞吐量（单位时间运行的作业个数）
		②Turnaround time，周转时间
		③CPU utilization，CPU利用率
	交互式系统：
		①Response time，响应时间
		②Proportionality，均衡性（简单命令，快出结果）
	实时系统：
		①Meeting deadlines，遵循时限要求
		②Predictability，可预测性

平均周转时间公式：（各个作业结束时间-进入时间）之和/n

平均带权周转时间公式：((各个作业结束时间-进入时间）/运行时间）之和/n

2.5.2 批处理系统调度
批处理系统的调度：
	①宏观调度（作业调度/高级调度）
	②微观调度（CPU调度/进程调度）
	③交换调度（中级调度）

作业调度常用算法：
	①FCFS（先来先服务，非抢占式）
	②SJF（短作业优先，非抢占式，可能饿死长作业）
	③HRF（高响应比优先，响应比=（等待时间+估计运行时间）/估计运行时间）
	④HPF（高优先级优先，非抢占式）
	⑤SRF（短剩余时间优先，抢占式）

2.5.3 交互式系统调度
交互式系统的调度算法：
	①Round-robin scheduling（R-R算法）时间片轮转法
	②优先级调度（静态，低优先级会被饿死）
		Priority 4：用户交互终端进程
		Priority 3：I/O繁忙进程
		Priority 2： CPU繁忙型进程
		Priority 1： ...
	③Multiple feedback queues 多级反馈队列算法（动态优先级+R-R算法）
		优先级越低，时间片越大，高优先级运行不完会降低优先级，减少系统切换开销。
	④Shortest process next
	⑤Guaranteed scheduling
	⑥Lottery scheduling
	⑦Fair-share scheduling
2.5.4 实时系统调度
实时系统调度，采用抢占式调度（先做紧急任务）
软实时：音频/视频传输
硬实时：锅炉温度检测（实现要求严格）
周期性任务调度
要满足
	Ci（任务执行时间）/Pi（周期长度）累加之和小于等于1
才能保证系统不超负载。

2.5.5 线程调度
用户级线程：内核对线程不感知，选择进程分配时间片。只会在统一进程内进行线程调度。

内核级线程：内核选择线程分配时间片。时钟中断对线程起作用，可能出现不同进程间的线程调度，跨进程调度开销大。
